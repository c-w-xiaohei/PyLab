name: 测评学习者代码

on:
  pull_request:
    branches: [ submit ]
    types: [opened, synchronize, reopened]

# 添加权限配置
permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  validate-submission:
    runs-on: ubuntu-latest
    name: 验证提交格式
    outputs:
      paths: ${{ steps.find-changes.outputs.paths }}
      username: ${{ steps.extract-info.outputs.username }}
      valid: ${{ steps.validate-path.outputs.valid }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 查找更改的文件
        id: find-changes
        run: |
          PR_FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "Changed files via API: $PR_FILES"
          
          VALID_CHANGES=true
          PATHS=""
          
          for file in $PR_FILES; do
            if [[ ! $file =~ ^submit/ ]]; then
              VALID_CHANGES=false
              echo "错误: 文件 $file 不在submit目录下"
              continue
            fi
            
            if [[ $file =~ ^submit/([^/]+)/lab([0-9]+)/ ]]; then
              USERNAME="${BASH_REMATCH[1]}"
              LAB_NUM="${BASH_REMATCH[2]}"
              LAB_PATH="$USERNAME/lab$LAB_NUM"
              
              if [[ ! $PATHS =~ $LAB_PATH ]]; then
                if [[ -z "$PATHS" ]]; then
                  PATHS="$LAB_PATH"
                else
                  PATHS="$PATHS $LAB_PATH"
                fi
              fi
            else
              VALID_CHANGES=false
              echo "错误: 文件 $file 不符合提交格式"
            fi
          done
          
          echo "valid=$VALID_CHANGES" >> $GITHUB_OUTPUT
          echo "paths=$PATHS" >> $GITHUB_OUTPUT
          
      - name: 提取用户信息
        id: extract-info
        run: |
          PATHS="${{ steps.find-changes.outputs.paths }}"
          if [[ $PATHS =~ ^([^/]+)/ ]]; then
            USERNAME="${BASH_REMATCH[1]}"
            echo "username=$USERNAME" >> $GITHUB_OUTPUT
          else
            echo "username=unknown" >> $GITHUB_OUTPUT
          fi
          
      - name: 验证用户名匹配
        id: validate-username
        run: |
          PR_USERNAME="${{ github.event.pull_request.user.login }}"
          SUBMISSION_USERNAME="${{ steps.extract-info.outputs.username }}"
          
          if [[ "$PR_USERNAME" == "$SUBMISSION_USERNAME" ]]; then
            echo "用户名匹配验证通过"
            echo "username_valid=true" >> $GITHUB_OUTPUT
          else
            echo "错误: PR用户名与提交路径用户名不匹配"
            echo "username_valid=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 验证路径格式
        id: validate-path
        run: |
          VALID="${{ steps.find-changes.outputs.valid }}"
          USERNAME_VALID="${{ steps.validate-username.outputs.username_valid }}"
          
          if [[ "$VALID" == "true" && "$USERNAME_VALID" == "true" && ! -z "${{ steps.find-changes.outputs.paths }}" ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

  evaluate-code:
    needs: validate-submission
    if: needs.validate-submission.outputs.valid == 'true'
    runs-on: ubuntu-latest
    name: 测评代码
    outputs:
      evaluation_result: ${{ steps.evaluate.outputs.result }}
      evaluation_exit_code: ${{ steps.evaluate.outputs.exit_code }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          
          if [ -f "requirements.txt" ]; then
            echo "安装根目录下的依赖..."
            python -m pip install -r requirements.txt
          fi
          
          for LAB_PATH in ${{ needs.validate-submission.outputs.paths }}; do
            if [[ $LAB_PATH =~ ([^/]+)/lab([0-9]+) ]]; then
              LAB_NUM="${BASH_REMATCH[2]}"
              REQ_FILE="code/lab${LAB_NUM}/requirements.txt"
              if [ -f "$REQ_FILE" ]; then
                echo "安装实验 ${LAB_NUM} 的依赖..."
                python -m pip install -r "$REQ_FILE"
              fi
              
              SUBMIT_REQ="submit/$LAB_PATH/requirements.txt"
              if [ -f "$SUBMIT_REQ" ]; then
                echo "安装学习者 ${LAB_PATH} 的依赖..."
                python -m pip install -r "$SUBMIT_REQ"
              fi
            fi
          done
          
      - name: 编译学习者代码
        run: |
          PATHS="${{ needs.validate-submission.outputs.paths }}"
          USERNAME="${{ needs.validate-submission.outputs.username }}"
          
          for LAB_PATH in $PATHS; do
            if [[ $LAB_PATH =~ ([^/]+)/lab([0-9]+) ]]; then
              LAB_NUM="${BASH_REMATCH[2]}"
              SUBMIT_DIR="submit/$LAB_PATH"
              
              echo "处理 $SUBMIT_DIR 中的Python文件..."
              
              cp evaluate/_setup.py "$SUBMIT_DIR/setup.py"
              
              # 设置环境变量强制生成.pyd文件
              (cd "$SUBMIT_DIR" && FORCE_PYD=1 python setup.py build_ext --inplace)
              
              rm -f "$SUBMIT_DIR/setup.py"
              rm -rf "$SUBMIT_DIR/build"
              find "$SUBMIT_DIR" -name "*.c" -delete
            fi
          done

      - name: 运行测评
        id: evaluate
        run: |
          PATHS="${{ needs.validate-submission.outputs.paths }}"
          
          PATH_ARGS=""
          for LAB_PATH in $PATHS; do
            if [[ -z "$PATH_ARGS" ]]; then
              PATH_ARGS="$LAB_PATH"
            else
              PATH_ARGS="$PATH_ARGS $LAB_PATH"
            fi
          done
          
          export PYTHONPATH=$PYTHONPATH:$(pwd)/evaluate
          
          RESULT=$(python -m evaluate.main --path $PATH_ARGS)
          EXIT_CODE=$?
          
          # 将结果输出到job outputs
          echo "result=\"$RESULT\"" >> $GITHUB_OUTPUT
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: 提交更改
        if: success()
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 检查是否有任何更改（包括.pyd文件和README.md）
          if ! git diff-index --quiet HEAD -- || [[ -n "$(git status --porcelain)" ]]; then
            # 添加所有更改
            git add -A
            
            # 获取更改的文件列表
            CHANGED_FILES=$(git status --porcelain)
            echo "检测到以下更改:"
            echo "$CHANGED_FILES"
            
            # 根据更改类型生成提交信息
            COMMIT_MSG=""
            if echo "$CHANGED_FILES" | grep -q "\.pyd"; then
              COMMIT_MSG="编译源码"
            fi
            if echo "$CHANGED_FILES" | grep -q "README.md"; then
              if [ -n "$COMMIT_MSG" ]; then
                COMMIT_MSG="$COMMIT_MSG 并更新成绩表"
              else
                COMMIT_MSG="更新成绩表"
              fi
            fi
            
            # 添加[skip ci]标记
            COMMIT_MSG="$COMMIT_MSG [skip ci]"
            
            # 提交更改
            git commit -m "$COMMIT_MSG"
            echo "已提交更改到 PR 分支"
          else
            echo "没有检测到需要提交的更改"
            exit 0
          fi

      - name: 推送更改到 PR 分支
        if: success()
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.repository }}
          branch: ${{ github.head_ref }}

  upload-results:
    needs: [validate-submission, evaluate-code]
    if: always()
    runs-on: ubuntu-latest
    name: 上传结果
    steps:
      - name: 准备结果JSON
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let evaluationResult = null;
            try {
              const resultStr = `${{ needs.evaluate-code.outputs.evaluation_result }}`;
              const cleanStr = resultStr.replace(/^"|"$/g, '');
              evaluationResult = JSON.parse(cleanStr);
            } catch (e) {
              console.log('解析评估结果失败:', e);
              console.log('原始结果字符串:', '${{ needs.evaluate-code.outputs.evaluation_result }}');
              
              evaluationResult = { error: "validation_failed" };
            }
            
            const results = {
              pr_number: ${{ github.event.pull_request.number }},
              validation: {
                valid: ${{ needs.validate-submission.outputs.valid == 'true' }},
                paths: '${{ needs.validate-submission.outputs.paths }}'.trim(),
                username: '${{ needs.validate-submission.outputs.username }}'.trim()
              },
              evaluation: {
                result: evaluationResult,
                exit_code: Number('${{ needs.evaluate-code.outputs.evaluation_exit_code || 1 }}')
              }
            };
            
            fs.writeFileSync('evaluation_results.json', JSON.stringify(results, null, 2));

      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: evaluation-results
          path: evaluation_results.json 